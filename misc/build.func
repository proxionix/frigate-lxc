#!/usr/bin/env bash

# Copyright (c) 2024 Proxionix
# License: MIT

# Variables globales pour la construction
variables() {
  NSAPP=$(echo ${APP,,} | tr -d ' ')
  var_install="${NSAPP}-install"
  INTEGER='^[0-9]+([.][0-9]+)?$'
  PVEHOST_NAME=$(hostname)
  DIAGNOSTICS="yes"
  METHOD="default"
  RANDOM_UUID="$(cat /proc/sys/kernel/random/uuid)"
}

# Configuration des couleurs et ic√¥nes
color() {
  YW=$(echo "\033[33m")
  BL=$(echo "\033[36m")
  RD=$(echo "\033[01;31m")
  BGN=$(echo "\033[4;92m")
  GN=$(echo "\033[1;92m")
  DGN=$(echo "\033[32m")
  CL=$(echo "\033[m")
  CROSS="${TAB}‚úñÔ∏è${TAB}${CL}"
  CM="${TAB}‚úîÔ∏è${TAB}${CL}"
  INFO="${TAB}üí°${TAB}${CL}"
  OS="${TAB}üñ•Ô∏è${TAB}${CL}"
}

# Gestion des erreurs
catch_errors() {
  set -Eeuo pipefail
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# Handler d'erreurs
error_handler() {
  local exit_code="$?"
  local line_number="$1"
  local command="$2"
  local error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"
  echo -e "\n$error_message\n"
}

# Animation du spinner
spinner() {
  local frames=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è')
  local spin_i=0
  local interval=0.1
  printf "\e[?25l"
  while true; do
    printf "\r ${YW}%s${CL}" "${frames[spin_i]}"
    spin_i=$(( (spin_i + 1) % ${#frames[@]} ))
    sleep "$interval"
  done
}

# Messages d'information
msg_info() {
  local msg="$1"
  echo -ne "${TAB}${YW}${HOLD}${msg}${HOLD}"
  spinner &
  SPINNER_PID=$!
}

# Messages de succ√®s
msg_ok() {
  if [ -n "$SPINNER_PID" ] && ps -p $SPINNER_PID > /dev/null; then kill $SPINNER_PID > /dev/null; fi
  printf "\e[?25h"
  local msg="$1"
  echo -e "${BFR}${CM}${GN}${msg}${CL}"
}

# V√©rification root
root_check() {
  if [[ "$(id -u)" -ne 0 || $(ps -o comm= -p $PPID) == "sudo" ]]; then
    clear
    msg_error "Ce script doit √™tre ex√©cut√© en tant que root"
    echo -e "\nArr√™t..."
    sleep 2
    exit
  fi
}

# V√©rification version PVE
pve_check() {
  if ! pveversion | grep -Eq "pve-manager/8\.[0-9]"; then
    msg_error "Ce script n√©cessite Proxmox VE 8.0 ou sup√©rieur"
    echo -e "\nArr√™t..."
    sleep 2
    exit
  fi
}

# Configurations de base du conteneur
base_settings() {
  CT_TYPE="1"              # Type de conteneur (1 = non privil√©gi√©)
  DISK_SIZE="20"           # Taille du disque en GB
  CORE_COUNT="4"           # Nombre de c≈ìurs CPU
  RAM_SIZE="4096"          # Taille RAM en MB
  VERBOSE="${1:-no}"       # Mode verbeux
  PW=""                    # Mot de passe
  CT_ID=$NEXTID           # ID du conteneur
  HN=$NSAPP               # Hostname
  BRG="vmbr0"             # Bridge r√©seau
  NET="dhcp"              # Configuration r√©seau
  GATE=""                 # Passerelle
  DISABLEIP6="yes"        # D√©sactiver IPv6
  SSH="no"                # Acc√®s SSH
  TAGS="frigate;"         # Tags du conteneur
}

# Construction du conteneur
build_container() {
  # Configuration des features du conteneur
  if [ "$CT_TYPE" == "1" ]; then
    FEATURES="keyctl=1,nesting=1"
  else
    FEATURES="nesting=1"
  fi

  # Export des variables d'environnement
  export FUNCTIONS_FILE_PATH="$(curl -s https://raw.githubusercontent.com/proxionix/frigate-lxc/main/misc/install.func)"
  export RANDOM_UUID="$RANDOM_UUID"
  export tz="$(cat /etc/timezone)"
  export DISABLEIPV6="$DISABLEIP6"
  export APPLICATION="$APP"
  export app="$NSAPP"
  export PASSWORD="$PW"
  export VERBOSE="$VERB"
  export SSH_ROOT="${SSH}"
  export CTID="$CT_ID"
  export CTTYPE="$CT_TYPE"
  export PCT_OSTYPE="$var_os"
  export PCT_OSVERSION="$var_version"
  export PCT_DISK_SIZE="$DISK_SIZE"
  export PCT_OPTIONS="
    -features $FEATURES
    -hostname $HN
    -tags $TAGS
    -net0 name=eth0,bridge=$BRG$MAC,ip=$NET$GATE$VLAN$MTU
    -onboot 1
    -cores $CORE_COUNT
    -memory $RAM_SIZE
    -unprivileged $CT_TYPE
    $PW
  "

  # Cr√©ation du conteneur
  bash -c "$(wget -qLO - https://raw.githubusercontent.com/proxionix/frigate-lxc/main/ct/create_lxc.sh)" || exit
}
